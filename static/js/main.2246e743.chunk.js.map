{"version":3,"sources":["components/Register.module.css","components/Login.module.css","firebase.js","components/Register.js","components/Login.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","auth","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Register","storage","useState","name","setName","email","setEmail","password","setPassword","user","setUser","useEffect","onAuthStateChanged","authUser","className","onSubmit","e","preventDefault","createUserWithEmailAndPassword","then","updateProfile","displayName","catch","error","console","log","message","signup","styles","box","onClick","signOut","type","onChange","target","value","placeholder","Login","signInWithEmailAndPassword","handleLogin","Home","App","to","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kFACAA,EAAOC,QAAU,CAAC,IAAM,wB,mBCAxBD,EAAOC,QAAU,CAAC,IAAM,qB,kNCalBC,GAZiBC,IAASC,cAAc,CAC1CC,OAAQ,0CACRC,WAAY,6BACZC,YAAa,oCACbC,UAAW,aACXC,cAAe,yBACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAINT,IAASD,QCqCPW,GDpCCV,IAASW,UCXR,WAAO,IAAD,EACKC,mBAAS,IADd,mBACZC,EADY,KACNC,EADM,OAEOF,mBAAS,IAFhB,mBAEZG,EAFY,KAELC,EAFK,OAGaJ,mBAAS,IAHtB,mBAGZK,EAHY,KAGFC,EAHE,OAIKN,mBAAS,MAJd,mBAIZO,EAJY,KAINC,EAJM,KAMrBC,qBAAU,WACRtB,EAAKuB,oBAAmB,SAACC,GAErBH,EADCG,GAIO,WAGP,CAACJ,IAcN,OACI,yBAAKK,UAAU,aACf,0BAAMC,SAAU,SAACC,GAAD,OAdL,SAACA,GACZA,EAAEC,iBACF5B,EAAK6B,+BAA+Bb,EAAOE,GAC9CY,MAAK,SAACN,GACL,OAAOA,EAASJ,KAAKW,cAAc,CACjCC,YAAalB,OAGhBmB,OAAM,SAACC,GAAD,OAAWC,QAAQC,IAAIF,EAAMG,YAMTC,CAAOX,IAAIF,UAAWc,IAAOC,KAChD,wCAEIpB,EAAM,6BAAK,4BAAQqB,QAAS,kBAAMzC,EAAK0C,YAA5B,aAAL,KAAwE,6BAElF,2BAAOC,KAAK,OAAOC,SAAU,SAACjB,GAAD,OAAOZ,EAAQY,EAAEkB,OAAOC,QAAQhC,KAAK,GAAGiC,YAAY,cACjF,2BAAOJ,KAAK,OAAOC,SAAU,SAACjB,GAAD,OAAOV,EAASU,EAAEkB,OAAOC,QAAQhC,KAAK,GAAGiC,YAAY,UAClF,2BAAOJ,KAAK,WAAWC,SAAU,SAACjB,GAAD,OAAOR,EAAYQ,EAAEkB,OAAOC,QAAQhC,KAAK,GAAGiC,YAAY,aACzF,2BAAOJ,KAAK,WAAW7B,KAAK,GAAGiC,YAAY,qBAC3C,2BAAOJ,KAAK,SAAS7B,KAAK,GAAGgC,MAAM,iB,iBCjBhCE,EAtBD,WAAO,IAAD,EACUnC,mBAAS,IADnB,mBACTG,EADS,KACFC,EADE,OAEgBJ,mBAAS,IAFzB,mBAETK,EAFS,KAECC,EAFD,KAUhB,OACI,6BACI,0BAAMM,UAAWc,IAAOC,IAAKd,SAAU,SAACC,GAAD,OAR3B,SAACA,GACjBA,EAAEC,iBACF5B,EAAKiD,2BAA2BjC,EAAOE,GACtCe,OAAM,SAACC,GAAD,OAAWC,QAAQC,IAAIF,EAAMG,YAKca,CAAYvB,KAC1D,qCACA,2BAAOgB,KAAK,OAAOG,MAAO9B,EAAO4B,SAAU,SAACjB,GAAD,OAAOV,EAASU,EAAEkB,OAAOC,QAAQhC,KAAK,GAAGiC,YAAY,UAChG,2BAAOJ,KAAK,WAAWG,MAAO5B,EAAU0B,SAAU,SAACjB,GAAD,OAAOR,EAAYD,IAAWJ,KAAK,GAAGiC,YAAY,aACpG,2BAAOJ,KAAK,SAAS7B,KAAK,GAAGgC,MAAM,a,eCXhCK,EARF,WACT,OACI,6BACI,kDCgDGC,MAzCf,WACE,OACE,yBAAK3B,UAAU,OAEb,kBAAC,IAAD,KACA,6BACI,4BACE,4BACE,kBAAC,IAAD,CAAM4B,GAAG,KAAT,SAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,aAAT,aAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,UAAT,UAEF,+BAON,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KACd,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,aACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,UACV,kBAAC,EAAD,WC/BUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtC,MAAK,SAAAuC,GACJA,EAAaC,gBAEdrC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMG,c","file":"static/js/main.2246e743.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"box\":\"Register_box__tmVJg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"box\":\"Login_box__5itoT\"};","import firebase from \"firebase\";\r\n\r\nconst firebaseConfig = firebase.initializeApp({\r\n    apiKey: \"AIzaSyDfMsYqj7PN7xQSRp42K20EXUvffiy7MOQ\",\r\n    authDomain: \"user-20a80.firebaseapp.com\",\r\n    databaseURL: \"https://user-20a80.firebaseio.com\",\r\n    projectId: \"user-20a80\",\r\n    storageBucket: \"user-20a80.appspot.com\",\r\n    messagingSenderId: \"797031984291\",\r\n    appId: \"1:797031984291:web:872969354af8a562e8a316\",\r\n    measurementId: \"G-R283K1ZVJ0\"\r\n  });\r\n\r\n// const db = firebaseApp.firestore()\r\nconst auth = firebase.auth()\r\nconst storage = firebase.storage()\r\n\r\nexport  {auth, storage}","import React,{useEffect,useState} from 'react'\r\nimport styles from './Register.module.css'\r\nimport {auth} from '../firebase'\r\n\r\nconst Register = () => {\r\n    const [name, setName] = useState('')\r\n    const [email, setEmail] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [user, setUser] = useState(null)\r\n\r\n  useEffect(() => {\r\n    auth.onAuthStateChanged((authUser)=>{\r\n      if(authUser){\r\n        setUser(authUser)\r\n        }\r\n      else{\r\n        setUser(null)\r\n      }\r\n      }) \r\n      }, [user])\r\n    \r\n    const signup = (e) => {\r\n        e.preventDefault()\r\n        auth.createUserWithEmailAndPassword(email, password)\r\n    .then((authUser) => {\r\n      return authUser.user.updateProfile({\r\n        displayName: name\r\n      })\r\n      })\r\n    .catch((error) => console.log(error.message))\r\n    // window.location.reload()\r\n    }\r\n    \r\n    return (\r\n        <div className=\"container\">\r\n        <form onSubmit={(e) => signup(e)} className={styles.box}>\r\n            <h1>Register</h1>\r\n            {\r\n                user? <div><button onClick={() => auth.signOut()}> Sign out</button> </div> : <h1></h1>\r\n            }\r\n            <input type=\"text\" onChange={(e) => setName(e.target.value)} name=\"\" placeholder=\"Full Name\"></input>\r\n            <input type=\"text\" onChange={(e) => setEmail(e.target.value)} name=\"\" placeholder=\"Email\"></input>\r\n            <input type=\"password\" onChange={(e) => setPassword(e.target.value)} name=\"\" placeholder=\"Password\"></input>\r\n            <input type=\"password\" name=\"\" placeholder=\"Confirm Password\"></input>\r\n            <input type=\"submit\" name=\"\" value=\"Register\"></input>\r\n        </form>\r\n        </div>\r\n    )\r\n    \r\n}\r\n\r\nexport default Register\r\n","import React,{useState} from 'react'\r\nimport styles from './Login.module.css'\r\nimport {auth} from '../firebase'\r\n\r\n\r\nconst Login = () => {\r\n    const [email, setEmail] = useState('')\r\n    const [password, setPassword] = useState('')\r\n\r\n    const handleLogin = (e) => {\r\n        e.preventDefault()\r\n        auth.signInWithEmailAndPassword(email, password)\r\n        .catch((error) => console.log(error.message))\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            <form className={styles.box} onSubmit={(e) => handleLogin(e)}>\r\n            <h1>Login</h1>\r\n            <input type=\"text\" value={email} onChange={(e) => setEmail(e.target.value)} name=\"\" placeholder=\"Email\"></input>\r\n            <input type=\"password\" value={password} onChange={(e) => setPassword(password)} name=\"\" placeholder=\"Password\"></input>\r\n            <input type=\"submit\" name=\"\" value=\"Login\"></input>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","import React from 'react'\r\n\r\nconst Home = () => {\r\n    return (\r\n        <div>\r\n            <h1>This is Homepage</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home\r\n","import React,{useContext} from 'react';\nimport './App.css';\nimport Register from './components/Register'\nimport Login from './components/Login';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport Home from './components/Home';\n\nfunction App() {  \n  return (\n    <div className=\"App\">\n\n      <Router>\n      <nav>\n          <ul>\n            <li>\n              <Link to=\"/\">Home</Link>\n            </li>\n            <li>\n              <Link to=\"/register\">Register</Link>\n            </li>\n            <li>\n              <Link to=\"/login\">Login</Link>\n            </li>\n            <li>\n              \n            </li>\n          </ul>\n        </nav>\n        \n     \n      <Switch>\n      <Route exact path=\"/\">\n          <Home/>\n        </Route>\n        <Route path=\"/register\">\n          <Register/>\n        </Route>\n        <Route path=\"/login\">\n          <Login/>\n        </Route>\n      </Switch>\n      </Router>\n\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}